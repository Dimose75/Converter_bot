import telebot
import requests
from bs4 import BeautifulSoup
from config import TOKEN, keys
from extensions import Get_Price, ConvertionExeption
from telebot import types

bot = telebot.TeleBot(TOKEN)


@bot.message_handler(commands=['start', 'help'])
def handle_help(message: telebot.types.Message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("‚ùì –ö–∞–∫ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É?")
    btn2 = types.KeyboardButton("üí∞ –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã")
    btn3 = types.KeyboardButton("üè¶ –ù–æ–≤–æ—Å—Ç–∏ —ç–∫–æ–Ω–æ–º–∏–∫–∏")
    markup.add(btn1, btn2, btn3)
    bot.send_message(message.chat.id, '–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç –¥–ª—è —É–¥–æ–±–Ω–æ–π –∏ –±—ã—Å—Ç—Ä–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç',
                     reply_markup=markup)


@bot.message_handler(content_types=['text', ])
def buttons(message: telebot.types.Message):
    texts = ""
    if message.text == "‚ùì –ö–∞–∫ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É?":
        bot.send_message(message.chat.id, "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ:"
                                          '\n <–í–∞–ª—é—Ç–∞><–í –∫–∞–∫—É—é –≤–∞–ª—é—Ç—É –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å><–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ>'"")
    elif message.text == "üè¶ –ù–æ–≤–æ—Å—Ç–∏ —ç–∫–æ–Ω–æ–º–∏–∫–∏":
        bot.send_message(message.chat.id, news())
    elif message.text == "üí∞ –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã":
        for key in keys.keys():
            texts = '\n'.join((texts, key,))
        bot.send_message(message.chat.id, texts)
    elif message.text != "‚ùì –ö–∞–∫ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É?" or message.text != "üí∞ –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã"\
            or message.text != "üè¶ –ù–æ–≤–æ—Å—Ç–∏ —ç–∫–æ–Ω–æ–º–∏–∫–∏":
        convert(message)


@bot.message_handler(content_types=['text', ])
def convert(message: telebot.types.Message):
    if message.text == '/start' or message.text == '/help':
        handle_help(message)
    else:
        try:
            values = message.text.split(' ')
            if len(values) != 3:
                raise ConvertionExeption('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤')
            quote, base, amount = values
            total_base = Get_Price.convert(quote, base, amount)
        except ConvertionExeption as e:
            bot.reply_to(message, f'–û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n{e}')
        except Exception as e:
            bot.reply_to(message, f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É\n{e}')
        else:
            text = f'–¶–µ–Ω–∞ {amount} {quote} –≤ {base} - {total_base}'
            bot.send_message(message.chat.id, text)




def news():
    base = 'https://lenta.ru/rubrics/economics/companies/'
    html = requests.get(base).content
    soup = BeautifulSoup(html, 'lxml')
    all_links = soup.find('ul', class_='rubric-page__container _subrubric').find_all('a')
    list_ = []
    str_ = ' '
    for item in all_links:
        item_text = item.text
        item_url = "https://lenta.ru" + item.get("href")
        if len(str_) < 1200:
            str_ += f'{item_url} {item_text} '
            list_.append(str_)
        else:
            break
    return str_


bot.polling(none_stop=True)
